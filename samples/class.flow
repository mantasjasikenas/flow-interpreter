class Printer {

    val header: String;

    constructor(text: String) {
        header = text;
    }

    fun printConsole(text: String): Unit {
        println(header + " => " + text);
    }

    fun printFile(text: String): Unit {
        writeFile(header + ".txt", text);
    }
}

class Calculator {

    fun fibonacciRecursive(n: Int): Int {
        if (n <= 1) {
            return n;
        }

        return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
    }

    fun fibonacciIterative(n: Int): Int {
        if (n <= 1) {
            return n;
        }

        var fibPrev = 0;
        var fibCurr = 1;

        for (i in 1..n) {
            val temp = fibCurr;
            fibCurr = fibCurr + fibPrev;
            fibPrev = temp;
        }

        return fibCurr;
    }

}

val n : Int = 12;

val calculator = new Calculator();

val resultRec = calculator.fibonacciRecursive(n);
val resultIter = calculator.fibonacciIterative(n);

val header1 = "Recursive";
val header2 = "Iterative";

val printer1 = new Printer (header1);
var printer2 = new Printer (header2);

printer1.printConsole("Fibonacci of " + n + " is " + resultRec);
printer2.printConsole("Fibonacci of " + n + " is " + resultIter);

printer1.printFile("Fibonacci of " + n + " is " + resultRec);
printer2.printFile("Fibonacci of " + n + " is " + resultIter);