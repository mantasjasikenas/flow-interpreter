/*
// class declaration goes to global scope
class Mantelis {

    var a: Int;
    var b: String;

    // if no constructor is defined, default constructor is used
        constructor(number : Int, text : String) {
            a = number;
            b = text;
        }

    fun MantelisMethod(num: String, lol: Int): Unit {
        println();
        print(num);
        print(";");
        println(a);
        println(b);
    }

    fun setA(num: Int): Unit {
        a = num;
    }

    fun getA(): Int {
        a = (a + 3) * 2;
        return a + 2;
    }

}

val obj1 = new Mantelis(1,"string1"); // object declaration goes to current scope

obj1.a = 1;
println(obj1.a);

obj1.setA(2);
println(obj1.a);

val gg: Int = obj1.getA();
println(gg);


val name: String = "test1.txt";
val text: String = "lol kek cheburek";

println();
println("Writing to file ");
writeFile(name, text);
println("writing done");

println();
println("Reading from file");
val text2: String = readFile(name);
println(text2);
println("reading done");

println(true == false);

*/
/*val txt = read();
println(txt);*//*


*/
/*val txt2 = readLine();
println(txt2);*//*


val kvk: Int;
kvk = 55464545;
println(kvk);

fun setA(num: Int): Unit {
    println("dibajob");
}


obj1.MantelisMethod("MantelisMethod_obj1", 96); // method call

println();

// TODO check if constructor exists
val obj2 = new Mantelis (88, "ctor_2"); // object declaration goes to current scope
obj2.MantelisMethod("MantelisMethod_obj2", 66); // method call


setA(5);



println();
println("Program exited with code 0");

*/

/*
var start: Int = 5;
val end: Int = 10;

for(a in start..end){
    println(a);
}

//println(a);

// should be error OK
//println(a);
println(); // prints null?
while (start <= end){
    println(start);
    start = start + 1;
    val kk: Int = 5;
}


if (5 == 5) {
    println("true");
} else {
    println("false");
}


// prints null? should be error
//println(kk);
*/


/*fun setA(num: Int): Int {
    println(num);
    println("dibajob");
    return 15;
    println("after return");
}


val a = setA(5);

println("Returned value:");
println(a);*/




class Calculator {
    fun fibonacci(n: Int): Int {
        if (n <= 1) {
            return n;
        }

        writeToConsole(n);

        return fibonacci(n - 1) + fibonacci(n - 2);
    }

    fun writeToConsole(number: Int): Unit {
        println("Writer:" + number);
    }

}




val calculator = new Calculator();

val count = 10;
val returnedValue = calculator.fibonacci(count);
calculator.writeToConsole(returnedValue);

println(returnedValue);

println("Program exited with code " + returnedValue + ".");


fun fibonacci(n: Int): Int {
    if (n <= 1) {
        return n;
    }

    calculator.writeToConsole(n);

    return fibonacci(n - 1) + fibonacci(n - 2);
}

val fib = fibonacci(3);
println(fib);

